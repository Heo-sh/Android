eclipse나 sts는 설정파일들이 같이 담겨있었으나,
android는 설치파일밖에 없어서 설정파일들을 담아놓을 폴더가 따로 필요하다.
- SDK(Software Development Kit): 휴대폰을 연결하는데 필요한 라이브러리, 드라이버, OS가 저장되게 할 폴더
- android 삭제시 유의사항은 .m2폴더를 지울 때 각별히 유의해야함.(안에 jdk 등 java에 필요한 설정파일들이 들어 있다)

화면에서 이벤트 처리에 대한 확인을 해야하는데 폰이 있으면 연결로 바로 확인이 가능하나,
없을 시 에뮬레이터를 돌려야 하는데 그 역할을 virtual device가 한다.

- app을 만들고 등록하는 법
    - 구글링을 하자: 돈내야 한다.
    - 웹보다 배포가 쉽다.

- Emulator Settings
  - ram이 높을 수록 좋으나, 
  - 컴의 사양에 맞춰서 하는게 좋다. (학원 컴에서는 4기가로 함)

※ram
- 프로그램을 한 번에 많이 실행 가능하게 하는 것
- 클수록 좋당

- 학원에서는 oreo 8.1버전 사용
- build tool 전체 선택
- 프로젝트 만들고 경로 설정 시에 프로젝트 이름으로 된 폴더도 같이 생성되게 해야함
-------------------------------------------------------------------------
Activity: 앱의 전반적인 활동을 담당
           여러가지 액션을 취할 수 있게 해준다.
           하나의 화면이라고 생각하면 된다.
-------------------------------------------------------------
Layout
- 안드로이드 앱을 개발하기 위해서는 반드시 화면이 필요하다.
- 화면에 보이는 모든 구성요소들을 뷰(View)라 한다.
- button, textbox, image 등 모든 요소를 뷰라 하며, 뷰들이 모여
  화면을 구성한다.
- 뷰는 화면 어딘가에 배치가 되어야 하는데 뷰 자체만으로는 자신이
  어디에 배치되어야 하는 지에 대한 정보가 없다.
- 뷰를 배치할 수 있는 무언가가 필요하며 그 역할을 하는 것이
  뷰 그룹, 뷰 컨테이너라 한다.
- 안드로이드에서는 뷰그룹을 상속받는 여러가지 레이아웃 클래스를
  제공한다.

Layout 종류
1. Linear Layout
  - view들을 수직 or 수평으로 배치할 수 있는 Layout
2. Frame Layout
  - 여러 개의 View를 중첩으로 배치할 수 있고 그 중 맨 위에 있는 게
    화면에 나온다.
3. Relative Layout
  - 자식 View 또는 부모 View 관계에 따라 배치를 적용한다.
  - 방향성을 가지지 않음
  - 위치를 결정할 때 상대적인 방법으로 결정
  - ex) Button을 기준으로 아래 배치
  - 요소를 배치할 때 기준으로 둘 무언가 필요
-------------------------------------------------------------------
이름 바꾸기: shift + F6
코드 자동 정렬: ctrl + alt + l
코드 이동: shift + alt + 화살표
코드 한 줄 복사: ctrl + d
코드 한 줄 삭제: ctrl + y
열어둔 파일들 이동:  Alt + ←, →
new -> activity -> empty views activity
  - xml파일도 자동적으로 만들어진다.
--------------------------------------------------------------------
Manifest
- 응용 프로그램 구성 요소를 시작하기 전에 Manifest를 읽어서 실행이 되는데
  각종 구성요소의 정보들 및 선언들이 담겨 있다.

역할
1. 앱에서 요구하는 사용자 권한을 정의
2. 앱이 실행될 수 있는 최소 API 레벨을 정의
3. 앱에서 사용하는 하드웨어/소프트웨어 기능을 정의
    - ex) 카메라, 블루투스, 사진첩
4. 앱에서 링크되어야 하는 라이브러리 선언	















