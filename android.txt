eclipse나 sts는 설정파일들이 같이 담겨있었으나,
android는 설치파일밖에 없어서 설정파일들을 담아놓을 폴더가 따로 필요하다.
- SDK(Software Development Kit): 휴대폰을 연결하는데 필요한 라이브러리, 드라이버, OS가 저장되게 할 폴더
- android 삭제시 유의사항은 .m2폴더를 지울 때 각별히 유의해야함.(안에 jdk 등 java에 필요한 설정파일들이 들어 있다)

화면에서 이벤트 처리에 대한 확인을 해야하는데 폰이 있으면 연결로 바로 확인이 가능하나,
없을 시 에뮬레이터를 돌려야 하는데 그 역할을 virtual device가 한다.

- app을 만들고 등록하는 법
    - 구글링을 하자: 돈내야 한다.
    - 웹보다 배포가 쉽다.

- Emulator Settings
  - ram이 높을 수록 좋으나, 
  - 컴의 사양에 맞춰서 하는게 좋다. (학원 컴에서는 4기가로 함)

※ram
- 프로그램을 한 번에 많이 실행 가능하게 하는 것
- 클수록 좋당

- 학원에서는 oreo 8.1버전 사용
- build tool 전체 선택
- 프로젝트 만들고 경로 설정 시에 프로젝트 이름으로 된 폴더도 같이 생성되게 해야함
-------------------------------------------------------------------------
Activity: 앱의 전반적인 활동을 담당
           여러가지 액션을 취할 수 있게 해준다.
           하나의 화면이라고 생각하면 된다.
-------------------------------------------------------------
Layout
- 안드로이드 앱을 개발하기 위해서는 반드시 화면이 필요하다.
- 화면에 보이는 모든 구성요소들을 뷰(View)라 한다.
- button, textbox, image 등 모든 요소를 뷰라 하며, 뷰들이 모여
  화면을 구성한다.
- 뷰는 화면 어딘가에 배치가 되어야 하는데 뷰 자체만으로는 자신이
  어디에 배치되어야 하는 지에 대한 정보가 없다.
- 뷰를 배치할 수 있는 무언가가 필요하며 그 역할을 하는 것이
  뷰 그룹, 뷰 컨테이너라 한다.
- 안드로이드에서는 뷰그룹을 상속받는 여러가지 레이아웃 클래스를
  제공한다.

Layout 종류
1. Linear Layout
  - view들을 수직 or 수평으로 배치할 수 있는 Layout
2. Frame Layout
  - 여러 개의 View를 중첩으로 배치할 수 있고 그 중 맨 위에 있는 게
    화면에 나온다.
3. Relative Layout
  - 자식 View 또는 부모 View 관계에 따라 배치를 적용한다.
  - 방향성을 가지지 않음
  - 위치를 결정할 때 상대적인 방법으로 결정
  - ex) Button을 기준으로 아래 배치
  - 요소를 배치할 때 기준으로 둘 무언가 필요
-------------------------------------------------------------------
이름 바꾸기: shift + F6
코드 자동 정렬: ctrl + alt + l
코드 이동: shift + alt + 화살표
코드 한 줄 복사: ctrl + d
코드 한 줄 삭제: ctrl + y
열어둔 파일들 이동:  Alt + ←, →
new -> activity -> empty views activity
  - xml파일도 자동적으로 만들어진다.
--------------------------------------------------------------------
Manifest
- 응용 프로그램 구성 요소를 시작하기 전에 Manifest를 읽어서 실행이 되는데
  각종 구성요소의 정보들 및 선언들이 담겨 있다.

역할
1. 앱에서 요구하는 사용자 권한을 정의
2. 앱이 실행될 수 있는 최소 API 레벨을 정의
3. 앱에서 사용하는 하드웨어/소프트웨어 기능을 정의
    - ex) 카메라, 블루투스, 사진첩
4. 앱에서 링크되어야 하는 라이브러리 선언	
----------------------------------------------------------------
Activity의 생명 주기
- Activity는 UI와 가장 밀접한 관련을 갖기 때문에
  사실상 안드로이드 앱에 있어서 기본이 되는 구성 요소이다.
- 보통 앱은 하나 이상의 Activity가 연결된 형태로 구성
- Activity는 생명 주기를 갖는다.

생명 주기 함수
1. onCreate() 
  - Activity가 생성되면 가장 먼저 호출
  - 최초로 앱 실행 시 호출
  - 생명주기를 통틀어서 한번만 호출되는 메서드
  - Activity 최초 실행에 해야하는 작업을 수행하기 적당
  - 화면 Layout 정의, View 생성 등은 이 곳에서 한다.
2. onStart()
  - 이 시점부터 사용자가 Activity를 볼 수 있다.
  - 화면에 진입할 때마다 실행되어야 하는 작업을 이 곳에 구현
3. onResume()
  - 현재 Activity가 사용자에게 focus In 되어 있는 상태
  - 화면에 보여지는 상태
4. onPause()
  - focus를 잃은 상태가 되면 호출
  - Activity가 실행 중인 상태에서 사용자와 상호작용이 불가능한 상태
  - 다른 Activity가 호출되기 전에 실행되기 때문에 무거운 작업을
    수행하지 않도록 주의
  - 영구적인 Data는 이곳에 저장
  - 화면에 보여지지 않는 상태
5. onStop()
  - Activity가 다른 Activity에 의해 100%로 가려질 때 호출되는 메서드
  - 홈 키를 누르는 경우, 다른 Activity로의 이동이 있는 경우
  - 이 상태에서 Activity가 호출되면 onRestart()가 호출된다.
6. onDestroy()
  - Activity가 완전히 종료되었을 때 호출되는 메서드
  - finish() or onBackPressed()가 호출되면 호출
  - 메모리 부족일 때 호출
  - onStop(), onDestroy()는 메모리 부족이 발생 시 Skip될 수 있다.
7. onRestart()
  - onStop()이 호출된 이후에 다시 기존 Activity로 돌아오는 경우에
    호출되는 메서드
  - onRestart()가 호출된 이후 이어서 onStart()가 호출됨
------------------------------------------------------------------------
R Class
- Android에는 R Class가 객체를 static으로 제공
- R.java객체는 Android 소스(Layout, img, String 등)를 식별하기 위해
  변수들을 관리
- 소스파일(JAVA)에서 resource에 접근할 때 R Class 사용
- XML파일에서는 R Class의 역할을 @(Annotaion)가 대신한다.
- 객체가 id를 부여받는 순간 R.java가 16진수의 정수 형태로 값을 저장
- 심지어 Layout을 만들 때조차 정수로 저장
- build할 때마다 값이 바뀐다.	




























